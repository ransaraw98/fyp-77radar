fc = 77e9;
c = physconst('LightSpeed');
N = 64;
Nsubarray = 4;
lambda = c/fc;
Nr = 16;
dt = Nr*lambda/2; %increasing the spacing between transmit antennas to make a thin-full array
dr = lambda/2;


antenna_element = phased.CosineAntennaElement;
antenna_element.FrequencyRange = [73e9 83e9];

subura = phased.URA( [4,4], dt, 'Element',antenna_element);
f0 = figure;
pattern(subura);
txarray = phased.ReplicatedSubarray('Subarray',subura, 'GridSize',[1 Nsubarray]);
f1 = figure;
pattern(txarray,fc)
%txarray = phased.ULA(Nt,dt);
%rxarray = phased.ULA(Nr,dr);
rxarray = phased.URA(Nr,dr);

refura = phased.URA(N,0.5*c/fc,'Element',antenna_element);
f2= figure;
subplot(2,1,1), pattern(txarray,fc,-180:180,0,'Type','powerdb','CoordinateSystem','rectangular','PropagationSpeed',c); 
title('Subarrayed URA Azimuth Cut'); axis([-90 90 -50 0]);
subplot(2,1,2), pattern(refura,fc,-180:180,0,'Type','powerdb','CoordinateSystem','rectangular','PropagationSpeed',c); 
title('URA Azimuth Cut'); axis([-90 90 -50 0]);

f3 = figure;
ang = -90:90;
pattx = pattern(txarray,fc,ang,0,'Type','powerdb');
patrx = pattern(rxarray,fc,ang,0,'Type','powerdb');
pat2way = pattx+patrx;
helperPlotMultipledBPattern(ang,[pat2way pattx patrx],[-30 0],{'Two-way Pattern','Tx Pattern','Rx Pattern'},'Patterns of thin/full arrays - 2Tx, 4Rx',{'-','--','-.'});

varray = phased.ULA(64,dr);
patv = pattern(varray,fc,ang,0,'Type','powerdb');
helperPlotMultipledBPattern(ang,[pat2way patv],[-30 0],...
    {'Two-way Pattern','Virtual Array Pattern'},...
    'Patterns of thin/full arrays and virtual array',...
    {'-','--'},[1 2]);